1. Find the duplicate in an array of N integers.
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive),
Approach 1: Sorting
Time complexity : O(nlogn)

The sort invocation costs O(nlgn) time in Python and Java, so it dominates the subsequent linear scan.

Space complexity : O(1) or O(n)

Here, we sort nums in place, so the memory footprint is constant. If we cannot modify the input array, then we must allocate linear space for a copy of nums and sort that instead.
Approach 2: Set
class Solution {
    public int findDuplicate(int[] nums) {
        Set<Integer> seen = new HashSet<Integer>();
        for (int num : nums) {
            if (seen.contains(num)) {
                return num;
            }
            seen.add(num);
        }

        return -1;
    }
}
Complexity Analysis

Time complexity :O(n)

Set in both Python and Java rely on underlying hash tables, so insertion and lookup have amortized constant time complexities. The algorithm is therefore linear, as it consists of a for loop that performs constant work nn times.

Space complexity : O(n)

In the worst case, the duplicate element appears twice, with one of its appearances at array index n-1n−1. In this case, seen will contain n-1n−1 distinct values, and will therefore occupy \mathcal{O}(n)O(n) space.

Approach 3: Binary Search
Space complexity o(1);
time complexity o(n);
public int findDuplicate(int[] nums) {
	int low = 1, high = nums.length - 1;
    while (low <= high) {
        int mid = (int) (low + (high - low) * 0.5);
        int cnt = 0;
        for (int a : nums) {
            if (a <= mid) ++cnt;
        }
        if (cnt <= mid) low = mid + 1;
        else high = mid - 1;
    }
    return low;
}

Approach 3: Floyd's Tortoise and Hare (Cycle Detection)
class Solution {
  public int findDuplicate(int[] nums) {
    // Find the intersection point of the two runners.
    int tortoise = nums[0];
    int hare = nums[0];
    do {
      tortoise = nums[tortoise];
      hare = nums[nums[hare]];
    } while (tortoise != hare);

    // Find the "entrance" to the cycle.
    tortoise = nums[0];
    while (tortoise != hare) {
      tortoise = nums[tortoise];
      hare = nums[hare];
    }

    return hare;
  }
Complexity Analysis

Time complexity : O(n)

For detailed analysis, refer to Linked List Cycle II.

Space complexity : O(1)

For detailed analysis, refer to Linked List Cycle II.